<?php

namespace Awesomite\Nano\Traits;

use Awesomite\Chariot\HttpMethods;
use Awesomite\Chariot\Pattern\PatternRouter;
use Awesomite\Chariot\RouterInterface;
use Awesomite\Nano\Nano;

/**
 * @internal
 *
 * @see https://github.com/awesomite/chariot
 */
trait RoutingTrait
{
    /**
     * @var PatternRouter
     */
    private $router;

    private $httpHandlers = [];

    private $routesCounter = 0;

    public function getRouter(): RouterInterface
    {
        return $this->router;
    }

    /**
     * @param string       $name
     * @param string|array $method
     * @param string       $path
     * @param callable     $handler
     *
     * @return Nano
     */
    public function route(string $name, $method, string $path, callable $handler): self
    {
        $this->router->addRoute($method, $path, $name);
        $this->httpHandlers[$name] = $handler;

        return $this;
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function get($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_GET, $path, $handler);
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function post($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_POST, $path, $handler);
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function patch($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_PATCH, $path, $handler);
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function put($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_PUT, $path, $handler);
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function delete($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_DELETE, $path, $handler);
    }

    /**
     * @param string|array $path
     * @param callable     $handler
     *
     * @return RoutingTrait
     */
    public function any($path, callable $handler): self
    {
        list($path, $name) = $this->getPathAndName($path);

        return $this->route($name, HttpMethods::METHOD_ANY, $path, $handler);
    }

    private function getPathAndName($path): array
    {
        if (is_string($path)) {
            return [
                $path,
                '@autoGenerated-' . (++$this->routesCounter),
            ];
        }

        if ($this->isNumericArray($path, 2)) {
            return $path;
        }

        throw new \InvalidArgumentException('Path must be instance of string or array[2]');
    }

    private function isNumericArray($data, int $count): bool
    {
        if (!is_array($data)) {
            return false;
        }

        if (count($data) !== $count) {
            return false;
        }

        for ($i = 0; $i < $count; $i++) {
            if (!array_key_exists($i, $data)) {
                return false;
            }
        }

        return true;
    }
}
